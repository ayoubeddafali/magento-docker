version: '3.3'

services:
  cron:
    image: ayoubensalem/magento1-cron
    depends_on:
      - apache
      - varnish
    networks:
      - appnet
    volumes:
      - type: volume
        source: data
        target: /var/www/html
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  nginx-ssl:
    image: nginx:stable-alpine
    depends_on:
      - varnish
    networks:
      - appnet
    volumes:
      - /etc/letsencrypt:/etc/letsencrypt
      - ./nginx.conf:/etc/nginx/nginx.conf
    ports:
      - "443:443"
    healthcheck:
      test: nc -z varnish:80 || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      placement:
        constraints: [node.role == manager]

  varnish:
    image: ayoubensalem/magento1-varnish
    ports:
      - "80:80"
      - "6082:6082"
    depends_on:
      - apache
    networks:
      - appnet
    environment:
      - CACHE_SIZE=256M
    healthcheck:
      test: curl -sS apache:80 || exit 1
      interval: 5s
      timeout: 5s
      retries: 10
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  apache:
    image: ayoubensalem/magento1-sampledata
    depends_on:
      - mysql
      - redis
      - redis-cache
      - clusterdata
    networks:
      - appnet
    volumes:
      - type: volume
        source: data
        target: /var/www/html
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  mysql:
    image: mysql:5.7
    environment:
      - MYSQL_ROOT_PASSWORD=19641995
      - MYSQL_USER=magento
      - MYSQL_PASSWORD=19641995
      - MYSQL_DATABASE=magento
    ports:
      - "3306:3306"
    volumes:
      - ./sample:/docker-entrypoint-initdb.d
      - mysql_data:/var/lib/mysql
    networks:
      - appnet
    deploy:
      placement:
        constraints: [node.role == manager]
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  redis-cache:
    image: redis
    volumes:
      - cache_data:/data
    networks:
      - appnet
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  redis:
    image: redis
    volumes:
      - session_data:/data
    networks:
      - appnet
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  clusterdata:
    image: redis
    volumes:
      - cluster_data:/data
    networks:
      - appnet
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        window: 120s

  portainer:
    image: portainer/portainer
    ports:
      - "9000:9000"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - appnet
    deploy:
      placement:
        constraints: [node.role == manager]



networks:
  appnet:
volumes:
  mysql_data:
    driver: rexray/dobs
  session_data:
    driver: rexray/dobs
  cache_data:
    driver: rexray/dobs
  cluster_data:
    driver: rexray/dobs
  data:
    driver: rexray/dobs

